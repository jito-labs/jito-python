"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import collections.abc
import geyser_pb2
import grpc

class GeyserStub:
    """The following __must__ be assumed:
       - Clients may receive data for slots out of order.
       - Clients may receive account updates for a given slot out of order.
    """

    def __init__(self, channel: grpc.Channel) -> None: ...
    GetHeartbeatInterval: grpc.UnaryUnaryMultiCallable[
        geyser_pb2.EmptyRequest,
        geyser_pb2.GetHeartbeatIntervalResponse,
    ]
    """Invoke to get the expected heartbeat interval."""
    SubscribeAccountUpdates: grpc.UnaryStreamMultiCallable[
        geyser_pb2.SubscribeAccountUpdatesRequest,
        geyser_pb2.TimestampedAccountUpdate,
    ]
    """Subscribes to account updates in the accounts database; additionally pings clients with empty heartbeats.
    Upon initially connecting the client can expect a `highest_write_slot` set in the http headers.
    Subscribe to account updates
    """
    SubscribeProgramUpdates: grpc.UnaryStreamMultiCallable[
        geyser_pb2.SubscribeProgramsUpdatesRequest,
        geyser_pb2.TimestampedAccountUpdate,
    ]
    """Subscribes to updates given a list of program IDs. When an account update comes in that's owned by a provided
    program id, one will receive an update
    """
    SubscribePartialAccountUpdates: grpc.UnaryStreamMultiCallable[
        geyser_pb2.SubscribePartialAccountUpdatesRequest,
        geyser_pb2.MaybePartialAccountUpdate,
    ]
    """Functions similarly to `SubscribeAccountUpdates`, but consumes less bandwidth.
    Returns the highest slot seen thus far in the http headers named `highest-write-slot`.
    """
    SubscribeSlotUpdates: grpc.UnaryStreamMultiCallable[
        geyser_pb2.SubscribeSlotUpdateRequest,
        geyser_pb2.TimestampedSlotUpdate,
    ]
    """Subscribes to slot updates.
    Returns the highest slot seen thus far in the http headers named `highest-write-slot`.
    """
    SubscribeTransactionUpdates: grpc.UnaryStreamMultiCallable[
        geyser_pb2.SubscribeTransactionUpdatesRequest,
        geyser_pb2.TimestampedTransactionUpdate,
    ]
    """Subscribes to transaction updates."""
    SubscribeBlockUpdates: grpc.UnaryStreamMultiCallable[
        geyser_pb2.SubscribeBlockUpdatesRequest,
        geyser_pb2.TimestampedBlockUpdate,
    ]
    """Subscribes to block updates."""

class GeyserServicer(metaclass=abc.ABCMeta):
    """The following __must__ be assumed:
       - Clients may receive data for slots out of order.
       - Clients may receive account updates for a given slot out of order.
    """

    @abc.abstractmethod
    def GetHeartbeatInterval(
        self,
        request: geyser_pb2.EmptyRequest,
        context: grpc.ServicerContext,
    ) -> geyser_pb2.GetHeartbeatIntervalResponse:
        """Invoke to get the expected heartbeat interval."""
    @abc.abstractmethod
    def SubscribeAccountUpdates(
        self,
        request: geyser_pb2.SubscribeAccountUpdatesRequest,
        context: grpc.ServicerContext,
    ) -> collections.abc.Iterator[geyser_pb2.TimestampedAccountUpdate]:
        """Subscribes to account updates in the accounts database; additionally pings clients with empty heartbeats.
        Upon initially connecting the client can expect a `highest_write_slot` set in the http headers.
        Subscribe to account updates
        """
    @abc.abstractmethod
    def SubscribeProgramUpdates(
        self,
        request: geyser_pb2.SubscribeProgramsUpdatesRequest,
        context: grpc.ServicerContext,
    ) -> collections.abc.Iterator[geyser_pb2.TimestampedAccountUpdate]:
        """Subscribes to updates given a list of program IDs. When an account update comes in that's owned by a provided
        program id, one will receive an update
        """
    @abc.abstractmethod
    def SubscribePartialAccountUpdates(
        self,
        request: geyser_pb2.SubscribePartialAccountUpdatesRequest,
        context: grpc.ServicerContext,
    ) -> collections.abc.Iterator[geyser_pb2.MaybePartialAccountUpdate]:
        """Functions similarly to `SubscribeAccountUpdates`, but consumes less bandwidth.
        Returns the highest slot seen thus far in the http headers named `highest-write-slot`.
        """
    @abc.abstractmethod
    def SubscribeSlotUpdates(
        self,
        request: geyser_pb2.SubscribeSlotUpdateRequest,
        context: grpc.ServicerContext,
    ) -> collections.abc.Iterator[geyser_pb2.TimestampedSlotUpdate]:
        """Subscribes to slot updates.
        Returns the highest slot seen thus far in the http headers named `highest-write-slot`.
        """
    @abc.abstractmethod
    def SubscribeTransactionUpdates(
        self,
        request: geyser_pb2.SubscribeTransactionUpdatesRequest,
        context: grpc.ServicerContext,
    ) -> collections.abc.Iterator[geyser_pb2.TimestampedTransactionUpdate]:
        """Subscribes to transaction updates."""
    @abc.abstractmethod
    def SubscribeBlockUpdates(
        self,
        request: geyser_pb2.SubscribeBlockUpdatesRequest,
        context: grpc.ServicerContext,
    ) -> collections.abc.Iterator[geyser_pb2.TimestampedBlockUpdate]:
        """Subscribes to block updates."""

def add_GeyserServicer_to_server(servicer: GeyserServicer, server: grpc.Server) -> None: ...
