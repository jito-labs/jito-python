# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import geyser_pb2 as geyser__pb2


class GeyserStub(object):
    """The following __must__ be assumed:
    - Clients may receive data for slots out of order.
    - Clients may receive account updates for a given slot out of order.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetHeartbeatInterval = channel.unary_unary(
                '/solana.geyser.Geyser/GetHeartbeatInterval',
                request_serializer=geyser__pb2.EmptyRequest.SerializeToString,
                response_deserializer=geyser__pb2.GetHeartbeatIntervalResponse.FromString,
                )
        self.SubscribeAccountUpdates = channel.unary_stream(
                '/solana.geyser.Geyser/SubscribeAccountUpdates',
                request_serializer=geyser__pb2.SubscribeAccountUpdatesRequest.SerializeToString,
                response_deserializer=geyser__pb2.TimestampedAccountUpdate.FromString,
                )
        self.SubscribeProgramUpdates = channel.unary_stream(
                '/solana.geyser.Geyser/SubscribeProgramUpdates',
                request_serializer=geyser__pb2.SubscribeProgramsUpdatesRequest.SerializeToString,
                response_deserializer=geyser__pb2.TimestampedAccountUpdate.FromString,
                )
        self.SubscribePartialAccountUpdates = channel.unary_stream(
                '/solana.geyser.Geyser/SubscribePartialAccountUpdates',
                request_serializer=geyser__pb2.SubscribePartialAccountUpdatesRequest.SerializeToString,
                response_deserializer=geyser__pb2.MaybePartialAccountUpdate.FromString,
                )
        self.SubscribeSlotUpdates = channel.unary_stream(
                '/solana.geyser.Geyser/SubscribeSlotUpdates',
                request_serializer=geyser__pb2.SubscribeSlotUpdateRequest.SerializeToString,
                response_deserializer=geyser__pb2.TimestampedSlotUpdate.FromString,
                )
        self.SubscribeTransactionUpdates = channel.unary_stream(
                '/solana.geyser.Geyser/SubscribeTransactionUpdates',
                request_serializer=geyser__pb2.SubscribeTransactionUpdatesRequest.SerializeToString,
                response_deserializer=geyser__pb2.TimestampedTransactionUpdate.FromString,
                )
        self.SubscribeBlockUpdates = channel.unary_stream(
                '/solana.geyser.Geyser/SubscribeBlockUpdates',
                request_serializer=geyser__pb2.SubscribeBlockUpdatesRequest.SerializeToString,
                response_deserializer=geyser__pb2.TimestampedBlockUpdate.FromString,
                )


class GeyserServicer(object):
    """The following __must__ be assumed:
    - Clients may receive data for slots out of order.
    - Clients may receive account updates for a given slot out of order.
    """

    def GetHeartbeatInterval(self, request, context):
        """Invoke to get the expected heartbeat interval.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeAccountUpdates(self, request, context):
        """Subscribes to account updates in the accounts database; additionally pings clients with empty heartbeats.
        Upon initially connecting the client can expect a `highest_write_slot` set in the http headers.
        Subscribe to account updates
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeProgramUpdates(self, request, context):
        """Subscribes to updates given a list of program IDs. When an account update comes in that's owned by a provided
        program id, one will receive an update
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribePartialAccountUpdates(self, request, context):
        """Functions similarly to `SubscribeAccountUpdates`, but consumes less bandwidth.
        Returns the highest slot seen thus far in the http headers named `highest-write-slot`.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeSlotUpdates(self, request, context):
        """Subscribes to slot updates.
        Returns the highest slot seen thus far in the http headers named `highest-write-slot`.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeTransactionUpdates(self, request, context):
        """Subscribes to transaction updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeBlockUpdates(self, request, context):
        """Subscribes to block updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GeyserServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetHeartbeatInterval': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHeartbeatInterval,
                    request_deserializer=geyser__pb2.EmptyRequest.FromString,
                    response_serializer=geyser__pb2.GetHeartbeatIntervalResponse.SerializeToString,
            ),
            'SubscribeAccountUpdates': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeAccountUpdates,
                    request_deserializer=geyser__pb2.SubscribeAccountUpdatesRequest.FromString,
                    response_serializer=geyser__pb2.TimestampedAccountUpdate.SerializeToString,
            ),
            'SubscribeProgramUpdates': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeProgramUpdates,
                    request_deserializer=geyser__pb2.SubscribeProgramsUpdatesRequest.FromString,
                    response_serializer=geyser__pb2.TimestampedAccountUpdate.SerializeToString,
            ),
            'SubscribePartialAccountUpdates': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribePartialAccountUpdates,
                    request_deserializer=geyser__pb2.SubscribePartialAccountUpdatesRequest.FromString,
                    response_serializer=geyser__pb2.MaybePartialAccountUpdate.SerializeToString,
            ),
            'SubscribeSlotUpdates': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeSlotUpdates,
                    request_deserializer=geyser__pb2.SubscribeSlotUpdateRequest.FromString,
                    response_serializer=geyser__pb2.TimestampedSlotUpdate.SerializeToString,
            ),
            'SubscribeTransactionUpdates': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeTransactionUpdates,
                    request_deserializer=geyser__pb2.SubscribeTransactionUpdatesRequest.FromString,
                    response_serializer=geyser__pb2.TimestampedTransactionUpdate.SerializeToString,
            ),
            'SubscribeBlockUpdates': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeBlockUpdates,
                    request_deserializer=geyser__pb2.SubscribeBlockUpdatesRequest.FromString,
                    response_serializer=geyser__pb2.TimestampedBlockUpdate.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'solana.geyser.Geyser', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Geyser(object):
    """The following __must__ be assumed:
    - Clients may receive data for slots out of order.
    - Clients may receive account updates for a given slot out of order.
    """

    @staticmethod
    def GetHeartbeatInterval(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/solana.geyser.Geyser/GetHeartbeatInterval',
            geyser__pb2.EmptyRequest.SerializeToString,
            geyser__pb2.GetHeartbeatIntervalResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeAccountUpdates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/solana.geyser.Geyser/SubscribeAccountUpdates',
            geyser__pb2.SubscribeAccountUpdatesRequest.SerializeToString,
            geyser__pb2.TimestampedAccountUpdate.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeProgramUpdates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/solana.geyser.Geyser/SubscribeProgramUpdates',
            geyser__pb2.SubscribeProgramsUpdatesRequest.SerializeToString,
            geyser__pb2.TimestampedAccountUpdate.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribePartialAccountUpdates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/solana.geyser.Geyser/SubscribePartialAccountUpdates',
            geyser__pb2.SubscribePartialAccountUpdatesRequest.SerializeToString,
            geyser__pb2.MaybePartialAccountUpdate.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeSlotUpdates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/solana.geyser.Geyser/SubscribeSlotUpdates',
            geyser__pb2.SubscribeSlotUpdateRequest.SerializeToString,
            geyser__pb2.TimestampedSlotUpdate.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeTransactionUpdates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/solana.geyser.Geyser/SubscribeTransactionUpdates',
            geyser__pb2.SubscribeTransactionUpdatesRequest.SerializeToString,
            geyser__pb2.TimestampedTransactionUpdate.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeBlockUpdates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/solana.geyser.Geyser/SubscribeBlockUpdates',
            geyser__pb2.SubscribeBlockUpdatesRequest.SerializeToString,
            geyser__pb2.TimestampedBlockUpdate.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
